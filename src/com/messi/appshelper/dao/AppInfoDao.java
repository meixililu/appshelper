package com.messi.appshelper.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.messi.appshelper.dao.AppInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table APP_INFO.
*/
public class AppInfoDao extends AbstractDao<AppInfo, Long> {

    public static final String TABLENAME = "APP_INFO";

    /**
     * Properties of entity AppInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AppName = new Property(1, String.class, "appName", false, "APP_NAME");
        public final static Property PackageName = new Property(2, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property VersionName = new Property(3, String.class, "versionName", false, "VERSION_NAME");
        public final static Property VersionCode = new Property(4, Integer.class, "versionCode", false, "VERSION_CODE");
        public final static Property TypeName = new Property(5, String.class, "typeName", false, "TYPE_NAME");
        public final static Property DefaultType = new Property(6, String.class, "defaultType", false, "DEFAULT_TYPE");
        public final static Property CustomType = new Property(7, String.class, "customType", false, "CUSTOM_TYPE");
        public final static Property SystemNo = new Property(8, Integer.class, "systemNo", false, "SYSTEM_NO");
        public final static Property LastOpenTime = new Property(9, String.class, "lastOpenTime", false, "LAST_OPEN_TIME");
        public final static Property StartTimes = new Property(10, Integer.class, "startTimes", false, "START_TIMES");
        public final static Property Backup1 = new Property(11, String.class, "backup1", false, "BACKUP1");
        public final static Property Backup2 = new Property(12, String.class, "backup2", false, "BACKUP2");
        public final static Property Backup3 = new Property(13, String.class, "backup3", false, "BACKUP3");
    };


    public AppInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AppInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'APP_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'APP_NAME' TEXT," + // 1: appName
                "'PACKAGE_NAME' TEXT," + // 2: packageName
                "'VERSION_NAME' TEXT," + // 3: versionName
                "'VERSION_CODE' INTEGER," + // 4: versionCode
                "'TYPE_NAME' TEXT," + // 5: typeName
                "'DEFAULT_TYPE' TEXT," + // 6: defaultType
                "'CUSTOM_TYPE' TEXT," + // 7: customType
                "'SYSTEM_NO' INTEGER," + // 8: systemNo
                "'LAST_OPEN_TIME' TEXT," + // 9: lastOpenTime
                "'START_TIMES' INTEGER," + // 10: startTimes
                "'BACKUP1' TEXT," + // 11: backup1
                "'BACKUP2' TEXT," + // 12: backup2
                "'BACKUP3' TEXT);"); // 13: backup3
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'APP_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AppInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(2, appName);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(3, packageName);
        }
 
        String versionName = entity.getVersionName();
        if (versionName != null) {
            stmt.bindString(4, versionName);
        }
 
        Integer versionCode = entity.getVersionCode();
        if (versionCode != null) {
            stmt.bindLong(5, versionCode);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(6, typeName);
        }
 
        String defaultType = entity.getDefaultType();
        if (defaultType != null) {
            stmt.bindString(7, defaultType);
        }
 
        String customType = entity.getCustomType();
        if (customType != null) {
            stmt.bindString(8, customType);
        }
 
        Integer systemNo = entity.getSystemNo();
        if (systemNo != null) {
            stmt.bindLong(9, systemNo);
        }
 
        String lastOpenTime = entity.getLastOpenTime();
        if (lastOpenTime != null) {
            stmt.bindString(10, lastOpenTime);
        }
 
        Integer startTimes = entity.getStartTimes();
        if (startTimes != null) {
            stmt.bindLong(11, startTimes);
        }
 
        String backup1 = entity.getBackup1();
        if (backup1 != null) {
            stmt.bindString(12, backup1);
        }
 
        String backup2 = entity.getBackup2();
        if (backup2 != null) {
            stmt.bindString(13, backup2);
        }
 
        String backup3 = entity.getBackup3();
        if (backup3 != null) {
            stmt.bindString(14, backup3);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AppInfo readEntity(Cursor cursor, int offset) {
        AppInfo entity = new AppInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // appName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // packageName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // versionName
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // versionCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // typeName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // defaultType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // customType
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // systemNo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // lastOpenTime
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // startTimes
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // backup1
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // backup2
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // backup3
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AppInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAppName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPackageName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVersionName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVersionCode(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTypeName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDefaultType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCustomType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSystemNo(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setLastOpenTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStartTimes(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setBackup1(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBackup2(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setBackup3(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AppInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AppInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
